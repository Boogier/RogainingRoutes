#!/usr/bin/env python3
"""
   Copyright 2017-2020 Semyon Yakimov
   This file is part of RogainingRoutes.
   RogainingRoutes is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   RogainingRoutes is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with RogainingRoutes.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import math
import shutil
import argparse
from jinja2 import Environment, FileSystemLoader, Template
import sfr
import sportorg
import splits_csv
import coursedata


javascript_map_scale = 1

env = Environment(
    loader=FileSystemLoader('templates'),
    trim_blocks=True,
    lstrip_blocks=True)

def rotate(origin, point, angle):
    """
    Rotate a point counterclockwise by a given angle around a given origin.
    """
    angle = math.radians(angle)
    ox, oy = origin
    px, py = point

    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy

def make_team_html(team, event_title, cp_coords, meters_in_pixel, map_filename, output_dir):
    team.full_name = team.get_team_full_name()
    title = '{} | {}'.format(team.full_name, event_title)
    team.penalty = team.sum - team.points
    if team.penalty < 0:
        team.penalty = 0
    table_titles = [
        'КП',
        'Время',
        'Сплит',
        'Очки',
        'Расстояние, км',
        'Темп, мин/км',
        'Мин/очко'
    ]

    start_x, start_y = cp_coords['start']
    start_offset_in_pixels = cp_coords['start_offset_in_pixels']
    rotate_angle = cp_coords.get('rotate_angle', 0)
    cp_list = []
    data = []
    total_points = 0
    previos = [start_x, start_y]
    total_distance = 0

    for i in range(len(team.route)):
        cp = team.route[i]
        if isinstance(cp.id, int):
            x, y = cp_coords[cp.id]
        else:
            x = start_x
            y = start_y
        x_pixels = int((x - start_x)/meters_in_pixel) + start_offset_in_pixels[0]
        y_pixels = -int((y - start_y)/meters_in_pixel) + start_offset_in_pixels[1]
        cp_list.append(rotate(start_offset_in_pixels, (x_pixels, y_pixels), rotate_angle))

        total_points += cp.points

        leg_distance = math.sqrt((x - previos[0])**2 + (y - previos[1])**2)
        leg_distance /= 1000 # km
        total_distance += leg_distance

        previos[0] = x
        previos[1] = y

        pace = 0
        if cp.split and leg_distance != 0:
            pace = cp.split.total_seconds()/leg_distance/60

        minToPoints = 0
        if cp.points:
            minToPoints = cp.split.total_seconds()/cp.points/60

        d = [
            i,
            cp.id,
            cp.time or '',
            cp.split or '',
            '{} / {}'.format(cp.points, total_points) if cp.points > 0 else '',
            '{:.2f} / {:.2f}'.format(leg_distance, total_distance) if leg_distance > 0 else '',
            '{:.2f}'.format(pace) if pace else '',
            '{:.2f}'.format(minToPoints) if minToPoints else ''
        ]
        data.append(d)

    avr_pace = team.time.total_seconds()/total_distance/60 if total_distance != 0 else 0

    table_summary = [
        '',
        '',
        '',
        '',
        total_points,
        '{:.2f}'.format(total_distance),
        '{:.2f}'.format(avr_pace) if avr_pace else '',
        '{:.2f}'.format(team.time.total_seconds()/total_points/60) if total_points != 0 else ''
    ]

    template = env.get_template('team.html')
    with open(os.path.join(output_dir, team.get_team_html_name()), 'w') as fd:
        fd.write(template.render(
            title=title,
            team=team,
            table_titles=table_titles,
            table_summary=table_summary,
            map_file=map_filename,
            map_scale=javascript_map_scale,
            cp_list=cp_list,
            data=data))


def make_result_html(teams, event_title, cp_coords, meters_in_pixel, map_filename, output_dir):
    print('Make result HTML')

    table_titles = [
        'Место',
        'Команда',
        'Участники',
        'Время',
        'Очки',
        'Штраф',
        'Итог'
    ]

    group_list = sorted(teams)
    data = {}
    for group in teams:
        data[group] = [];
        for team in teams[group]:
            make_team_html(team, event_title, cp_coords, meters_in_pixel, map_filename, output_dir)
            t = [
                team.place,
                '<a href="{}">{}</a>'.format(team.get_team_html_name(), team.get_team_full_name()),
                team.get_members_str(),
                team.time,
                team.sum,
                team.penalty if team.penalty > 0 else '',
                '<b>{}</b>'.format(team.points),
            ]
            data[group].append(t)

    template = env.get_template('results.html')
    with open(os.path.join(output_dir, 'routes.html'), 'w') as fd:
        fd.write(template.render(title=event_title, table_titles=table_titles, group_list=group_list, data=data))

def make_parser():
    parser = argparse.ArgumentParser(
        description='Command line utility to generate routes.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('file', nargs='?', default='splits.html',
        help='splits SFR HTML file')
    parser.add_argument('-c', '--coords-file', default='coords.csv',
        help='coords CSV file')
    parser.add_argument('-m', '--map-file', default='map.jpg',
        help='map file')
    parser.add_argument('-d', '--map-dpi', type=int, default='72',
        help='map DPI')
    parser.add_argument('-l', '--map-scale', type=int, default='25000',
        help='map scale')
    parser.add_argument('-o', '--output-dir', default='output',
        help='output directory')
    return parser

if __name__ == '__main__':
    args,_ = make_parser().parse_known_args()

    input_filename_extension = os.path.splitext(args.file)[1]
    if input_filename_extension == '.json':
        teams, event_title = sportorg.parse_sportorg_result_json(args.file)
    elif input_filename_extension == '.csv':
        teams, event_title = splits_csv.parse_splits_csv(args.file)
    else:
        teams, event_title = sfr.parse_SFR_splits_html(args.file)
    cp_coords = coursedata.parse_course_data_file(args.coords_file)

    shutil.rmtree(args.output_dir, ignore_errors=True)
    os.mkdir(args.output_dir)

    output_map_filename = 'map' + os.path.splitext(args.map_file)[1]

    shutil.copy(args.map_file, os.path.join(args.output_dir, output_map_filename))
    shutil.copy('templates/style.css', args.output_dir)

    meters_in_pixel = args.map_scale*0.0254/args.map_dpi
    print('Meters in pixel:', meters_in_pixel)
    make_result_html(teams, event_title, cp_coords, meters_in_pixel, output_map_filename, args.output_dir)


